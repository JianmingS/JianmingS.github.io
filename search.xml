<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/04/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>leetcode 53. 最大子序和</title>
    <url>/2021/04/10/leetcode-53-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>定义f(i)：以第i个数结尾的连续子数组的最大和<br>答案即为：max(f(i)), 0&lt;=i&lt;n</p>
<p>f(i) = max(f(i-1)+num[i], num[i])</p>
<p>时间复杂度：O(n), 空间复杂度：O(1)</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        ans = nums[<span class="number">0</span>]</span><br><span class="line">        pre_max_sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            pre_max_sum = <span class="built_in">max</span>(pre_max_sum + num, num)</span><br><span class="line">            ans = <span class="built_in">max</span>(pre_max_sum, ans)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】数组</tag>
        <tag>【算法】动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 3. 无重复字符的最长子串</title>
    <url>/2021/04/10/leetcode-3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<p>滑动窗口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        s_len = <span class="built_in">len</span>(s)</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        end = <span class="number">0</span></span><br><span class="line">        visited_char_set = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> start <span class="keyword">in</span> <span class="built_in">range</span>(s_len):</span><br><span class="line">            end = <span class="built_in">max</span>(end, start)</span><br><span class="line">            visited_char_set.add(s[start])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> end + <span class="number">1</span> &lt; s_len <span class="keyword">and</span> s[end + <span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> visited_char_set:</span><br><span class="line">                visited_char_set.add(s[end + <span class="number">1</span>])</span><br><span class="line">                end += <span class="number">1</span></span><br><span class="line">            ans = <span class="built_in">max</span>(ans, end - start + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            visited_char_set.remove(s[start])</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】字符串</tag>
        <tag>【算法】双指针</tag>
        <tag>【算法】滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 5. 最长回文子串</title>
    <url>/2021/04/09/leetcode-5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<p>中心扩展法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        ret = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s)):</span><br><span class="line">            s1 = self.get_palindrome(s, i, i)</span><br><span class="line">            s2 = self.get_palindrome(s, i, i+<span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(s1) &gt; <span class="built_in">len</span>(ret):</span><br><span class="line">                ret = s1</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(s2) &gt; <span class="built_in">len</span>(ret):</span><br><span class="line">                ret = s2</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_palindrome</span>(<span class="params">self, s, left_index, right_index</span>):</span></span><br><span class="line">        ret = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> left_index &gt;= <span class="number">0</span> <span class="keyword">and</span> right_index &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> s[left_index] == s[right_index]:</span><br><span class="line">            ret = s[left_index: right_index + <span class="number">1</span>]</span><br><span class="line">            left_index -= <span class="number">1</span></span><br><span class="line">            right_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 1448. 统计二叉树中好节点的数目</title>
    <url>/2021/04/11/leetcode-1448-%E7%BB%9F%E8%AE%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%A5%BD%E8%8A%82%E7%82%B9%E7%9A%84%E6%95%B0%E7%9B%AE/</url>
    <content><![CDATA[<p>遍历二叉树即可</p>
<p>时间复杂度：O(n)<br>空间复杂度：O(1)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.good_node_cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">goodNodes</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        self.good_node_cnt = <span class="number">0</span></span><br><span class="line">        self.solve_good_node_cnt(root, <span class="built_in">float</span>(<span class="string">&#x27;-INF&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> self.good_node_cnt</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve_good_node_cnt</span>(<span class="params">self, root, max_val</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> root.val &gt;= max_val:</span><br><span class="line">            self.good_node_cnt += <span class="number">1</span></span><br><span class="line">            max_val = root.val</span><br><span class="line">            </span><br><span class="line">        self.solve_good_node_cnt(root.left, max_val)</span><br><span class="line">        self.solve_good_node_cnt(root.right, max_val)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】递归</tag>
        <tag>【算法】二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 1. 两数之和</title>
    <url>/2021/04/11/leetcode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<p>遍历数组即可</p>
<p>时间复杂度：O(n)<br>空间复杂度：O(n)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        num_to_index = <span class="built_in">dict</span>([(num, i) <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums)])</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            expected_num_index = num_to_index.get(target-num)</span><br><span class="line">            <span class="keyword">if</span> expected_num_index <span class="keyword">and</span> expected_num_index &gt; i:</span><br><span class="line">                <span class="keyword">return</span> [i, expected_num_index]</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】数组</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 560. 和为K的子数组</title>
    <url>/2021/04/11/leetcode-560-%E5%92%8C%E4%B8%BAK%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="定义pre-i"><a href="#定义pre-i" class="headerlink" title="定义pre[i]"></a>定义pre[i]</h2><p>下标[0, i]的子数组和</p>
<h2 id="求解方法"><a href="#求解方法" class="headerlink" title="求解方法"></a>求解方法</h2><p>下标[j, i]的子数组和为k &lt;=&gt; pre[i]-pre[j-1] == k &lt;==&gt; pre[j-1] == pre[i]-k  (注意：j &lt;= i）<br>通过计算第i个元素前，有多少个pre等于pre[i]-k，可得到以第i个元素结尾的和为k的子数组个数<br>遍历n个元素，累加和为k的子数组个数，即可得到答案</p>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>O(n)</p>
<h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>O(n)</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subarraySum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        pre_sum = <span class="number">0</span></span><br><span class="line">        pre_val_to_cnt = defaultdict(<span class="built_in">int</span>)</span><br><span class="line">        pre_val_to_cnt[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            pre_sum += num</span><br><span class="line">            ret += pre_val_to_cnt.get(pre_sum - k) <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">            pre_val_to_cnt[pre_sum] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 523. 连续的子数组和</title>
    <url>/2021/04/13/leetcode-523-%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="定义pre-i"><a href="#定义pre-i" class="headerlink" title="定义pre[i]"></a>定义pre[i]</h2><p>下标[0, i]的子数组和</p>
<h2 id="求解方法"><a href="#求解方法" class="headerlink" title="求解方法"></a>求解方法</h2><p>下标[j, i]的子数组和为k的倍数 (j&lt;i)<br>&lt;=&gt;<br>pre[i]-pre[j-1] == n*k<br>&lt;==&gt;<br>pre[i] == n1*k + rem1<br>pre[j] == n2*k + rem2<br>rem1 == rem2<br>&lt;==&gt;<br>通过计算第i个元素前，是否有pre%k等于pre[i]%k，即说明存在以i结尾的子数组和为k的倍数</p>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>O(n)</p>
<h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>O(min(n,k))</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkSubarraySum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        rem_to_index = &#123;<span class="number">0</span>: -<span class="number">1</span>&#125;  <span class="comment"># 确保[0, i]子数组和是k的倍数时，返回true（i&gt;=2）</span></span><br><span class="line">        pre_sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            pre_sum += num</span><br><span class="line">            rem = pre_sum%k</span><br><span class="line">            equal_rem_pos = rem_to_index.get(rem)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> equal_rem_pos <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                rem_to_index[rem] = i</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i - equal_rem_pos &gt;= <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】前缀和</tag>
        <tag>【算法】数学</tag>
        <tag>【算法】取余</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 236. 二叉树的最近公共祖先</title>
    <url>/2021/04/14/leetcode-236-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
    <content><![CDATA[<h1 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>获取每个节点的父节点<br>记录p所有的祖先节点<br>q节点不断向祖先移动，若有祖先在p的祖先节点中，则该祖先为p、q的最近公共祖先</p>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>O(n)</p>
<h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>O(n)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.node_to_father = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span>(<span class="params">self, root: <span class="string">&#x27;TreeNode&#x27;</span>, p: <span class="string">&#x27;TreeNode&#x27;</span>, q: <span class="string">&#x27;TreeNode&#x27;</span></span>) -&gt; &#x27;TreeNode&#x27;:</span></span><br><span class="line">        self.node_to_father = <span class="built_in">dict</span>()</span><br><span class="line">        self.traverse_tree(root)</span><br><span class="line"></span><br><span class="line">        visited_node_set = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">while</span> p:</span><br><span class="line">            visited_node_set.add(p.val)</span><br><span class="line">            p = self.node_to_father.get(p.val)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            <span class="keyword">if</span> q.val <span class="keyword">in</span> visited_node_set:</span><br><span class="line">                <span class="keyword">return</span> q</span><br><span class="line">            q = self.node_to_father.get(q.val)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traverse_tree</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="keyword">if</span> root.left:</span><br><span class="line">            self.node_to_father[root.left.val] = root</span><br><span class="line">            self.traverse_tree(root.left)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> root.right:</span><br><span class="line">            self.node_to_father[root.right.val] = root</span><br><span class="line">            self.traverse_tree(root.right)</span><br></pre></td></tr></table></figure>

<h1 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>两种情况：<br>1、p不是q的祖先节点（反之亦然）<br>从root结点开始遍历节点，若存在节点，p（或q）在其左子树找到  且  q（或p）在其右子树找到，则该节点就是p、q的最近公共祖先<br>2、p是q的祖先节点（反之亦然）<br>从root结点开始遍历节点，若存在节点等于p（或q），则该节点就是p、q的最近公共祖先</p>
<h2 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>O(n)</p>
<h2 id="空间复杂度-1"><a href="#空间复杂度-1" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>O(n)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span>(<span class="params">self, root: <span class="string">&#x27;TreeNode&#x27;</span>, p: <span class="string">&#x27;TreeNode&#x27;</span>, q: <span class="string">&#x27;TreeNode&#x27;</span></span>) -&gt; &#x27;TreeNode&#x27;:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> p.val == root.val <span class="keyword">or</span> q.val == root.val:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        </span><br><span class="line">        left = self.lowestCommonAncestor(root.left, p, q)</span><br><span class="line">        right = self.lowestCommonAncestor(root.right, p, q)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> left <span class="keyword">and</span> right:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">if</span> left:</span><br><span class="line">            <span class="keyword">return</span> left</span><br><span class="line">        <span class="keyword">if</span> right:</span><br><span class="line">            <span class="keyword">return</span> right</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 325. 和等于 k 的最长子数组长度</title>
    <url>/2021/04/14/leetcode-325-%E5%92%8C%E7%AD%89%E4%BA%8E-k-%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>方法同 <a href="https://jianmings.github.io/2021/04/11/leetcode-560-%E5%92%8C%E4%B8%BAK%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/" target="_blank">leetcode 560. 和为K的子数组</a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArrayLen</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        pre_sum_to_index = &#123;<span class="number">0</span>: -<span class="number">1</span>&#125;</span><br><span class="line">        pre_sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            pre_sum += num</span><br><span class="line">            expected_val = pre_sum - k</span><br><span class="line">            <span class="keyword">if</span> expected_val <span class="keyword">in</span> pre_sum_to_index:</span><br><span class="line">                ret = <span class="built_in">max</span>(ret, i - pre_sum_to_index[expected_val])</span><br><span class="line">            <span class="keyword">if</span> pre_sum <span class="keyword">not</span> <span class="keyword">in</span> pre_sum_to_index:</span><br><span class="line">                pre_sum_to_index[pre_sum] = i</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 1650. 二叉树的最近公共祖先 III</title>
    <url>/2021/04/15/leetcode-1650-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88-III/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>同 <a href="https://jianmings.github.io/2021/04/14/leetcode-236-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/" target="_blank">leetcode 236. 二叉树的最近公共祖先</a> 方法1</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># Definition for a Node.</span></span><br><span class="line"><span class="string">class Node:</span></span><br><span class="line"><span class="string">    def __init__(self, val):</span></span><br><span class="line"><span class="string">        self.val = val</span></span><br><span class="line"><span class="string">        self.left = None</span></span><br><span class="line"><span class="string">        self.right = None</span></span><br><span class="line"><span class="string">        self.parent = None</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span>(<span class="params">self, p: <span class="string">&#x27;Node&#x27;</span>, q: <span class="string">&#x27;Node&#x27;</span></span>) -&gt; &#x27;Node&#x27;:</span></span><br><span class="line">        p_parent_set = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">while</span> p:</span><br><span class="line">            p_parent_set.add(p.val)</span><br><span class="line">            p = p.parent</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            <span class="keyword">if</span> q.val <span class="keyword">in</span> p_parent_set:</span><br><span class="line">                <span class="keyword">return</span> q</span><br><span class="line">            q = q.parent</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 121. 买卖股票的最佳时机</title>
    <url>/2021/04/15/leetcode-121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>遍历一次数组即可</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        min_val = <span class="built_in">float</span>(<span class="string">&#x27;INF&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> price <span class="keyword">in</span> prices:</span><br><span class="line">            min_val = <span class="built_in">min</span>(min_val, price)</span><br><span class="line">            profit = price - min_val</span><br><span class="line">            <span class="keyword">if</span> profit &gt; ret:</span><br><span class="line">                ret = profit</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】数组</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 41. 缺失的第一个正数</title>
    <url>/2021/04/17/leetcode-41-%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>对于一个长度为N的数组，缺失的第一个正数在[1, N+1]中（若[1,N]在数组都出现了，那么答案是N+1），否则答案是[1,N]中没有出现的最小正数</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">firstMissingPositive</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        nums_len = <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> num &lt;= <span class="number">0</span>:</span><br><span class="line">                nums[i] = nums_len + <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            num = <span class="built_in">abs</span>(num)</span><br><span class="line">            <span class="keyword">if</span> num &lt;= nums_len:</span><br><span class="line">                nums[num-<span class="number">1</span>] = -<span class="built_in">abs</span>(nums[num-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> num &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nums_len + <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】数组</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 54. 螺旋矩阵</title>
    <url>/2021/04/22/leetcode-54-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>模拟</p>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>O(mn)</p>
<h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><p>O(mn)</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spiralOrder</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        ret = []</span><br><span class="line">        col = <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">        row = <span class="built_in">len</span>(matrix)</span><br><span class="line">        visited = [[<span class="literal">False</span>]*col <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row)]</span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        y = <span class="number">0</span></span><br><span class="line">        direct = <span class="string">&#x27;right&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> x &gt;= row <span class="keyword">or</span> y &gt;= col <span class="keyword">or</span> visited[x][y]:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">            ret.append(matrix[x][y])</span><br><span class="line">            visited[x][y] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> direct == <span class="string">&#x27;right&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> y == col - <span class="number">1</span> <span class="keyword">or</span> visited[x][y+<span class="number">1</span>]:</span><br><span class="line">                    direct = <span class="string">&#x27;down&#x27;</span></span><br><span class="line">                    x += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    y += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> direct == <span class="string">&#x27;down&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> x == row - <span class="number">1</span> <span class="keyword">or</span> visited[x+<span class="number">1</span>][y]:</span><br><span class="line">                    direct = <span class="string">&#x27;left&#x27;</span></span><br><span class="line">                    y -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    x += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> direct == <span class="string">&#x27;left&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> y == <span class="number">0</span> <span class="keyword">or</span> visited[x][y-<span class="number">1</span>]:</span><br><span class="line">                    direct = <span class="string">&#x27;up&#x27;</span></span><br><span class="line">                    x -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    y -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> direct == <span class="string">&#x27;up&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> x == <span class="number">0</span> <span class="keyword">or</span> visited[x-<span class="number">1</span>][y]:</span><br><span class="line">                    direct = <span class="string">&#x27;right&#x27;</span></span><br><span class="line">                    y += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    x -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】数组</tag>
        <tag>【算法】模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 49. 字母异位词分组</title>
    <url>/2021/04/23/leetcode-49-%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>排序后相等的字符串，划归为一组</p>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>O(n*mlogm)  （n：字符串个数；m：字符串长度）</p>
<h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><p>O(n*m)  （n：字符串个数；m：字符串长度）</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">groupAnagrams</span>(<span class="params">self, strs: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]:</span></span><br><span class="line">        flag_to_list = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">            flag_to_list[<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">sorted</span>(s))].append(s)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(flag_to_list.values())</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 15. 三数之和</title>
    <url>/2021/05/09/leetcode-15-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>利用双指针将时间复杂度从O(N^3)降为O(N^2)</p>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>O(N^2)</p>
<h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><p>O(N)</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span></span><br><span class="line">        ret = []</span><br><span class="line"></span><br><span class="line">        nums_len = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> nums_len &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">            </span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> num &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> num == nums[i-<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            left = i + <span class="number">1</span></span><br><span class="line">            right = nums_len - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                total = num + nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> total == <span class="number">0</span>:</span><br><span class="line">                    ret.append([num, nums[left], nums[right]])</span><br><span class="line">                    <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[left+<span class="number">1</span>] == nums[left]:</span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> right &gt; left <span class="keyword">and</span> nums[right-<span class="number">1</span>] == nums[right]:</span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> total &gt; <span class="number">0</span>:</span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】数组</tag>
        <tag>【算法】双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>【工厂模式】工厂方法</title>
    <url>/2021/05/21/%E3%80%90%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E3%80%91%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>创建对象的代码在许多不同的地方，导致难以跟踪应用中创建的对象</p>
<h1 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h1><p>基于单一的函数创建对象：根据传入参数，创建出想要的对象。<br>（外部不需要知道对象的实现细节）</p>
<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><h2 id="背景-amp-amp-需求"><a href="#背景-amp-amp-需求" class="headerlink" title="背景&amp;&amp;需求"></a>背景&amp;&amp;需求</h2><p>XXX数据存储于XML文件和JSON文件中，目前需要获取XXX数据</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> etree</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSONDataExtractor</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, file_path</span>):</span></span><br><span class="line">        self.data = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, mode=<span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            self.data = json.load(f)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parsed_data</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.data</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XMLDataExtractor</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, file_path</span>):</span></span><br><span class="line">        self.tree = etree.parse(file_path)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parsed_data</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.tree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_extractor_factory</span>(<span class="params">file_path</span>):</span></span><br><span class="line">    <span class="keyword">if</span> file_path.endswith(<span class="string">&#x27;json&#x27;</span>):</span><br><span class="line">        extractor = JSONDataExtractor</span><br><span class="line">    <span class="keyword">elif</span> file_path.endswith(<span class="string">&#x27;xml&#x27;</span>):</span><br><span class="line">        extractor = XMLDataExtractor</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&#x27;Cannot extract data from <span class="subst">&#123;file_path&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> extractor(file_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_data</span>(<span class="params">file_path</span>):</span></span><br><span class="line">    factory_obj = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        factory_obj = data_extractor_factory(file_path)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">return</span> factory_obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    root_path = <span class="string">&#x27;/20210523&#x27;</span></span><br><span class="line">    <span class="comment"># 获取存储在json中的数据</span></span><br><span class="line">    factory = extract_data(os.path.join(root_path, <span class="string">&#x27;test.json&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;JSON Data=<span class="subst">&#123;factory <span class="keyword">and</span> factory.parsed_data&#125;</span>\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取存储在xml中的数据</span></span><br><span class="line">    factory = extract_data(os.path.join(root_path, <span class="string">&#x27;test.xml&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;XML Data=<span class="subst">&#123;factory <span class="keyword">and</span> factory.parsed_data&#125;</span>\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取存储在ini中的数据，会报异常</span></span><br><span class="line">    factory = extract_data(os.path.join(root_path, <span class="string">&#x27;test.ini&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Abnormal Data=<span class="subst">&#123;factory <span class="keyword">and</span> factory.parsed_data&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><blockquote>
<p>JSON Data=[{‘title’: ‘Ha’}]</p>
<p>XML Data=&lt;xml.etree.ElementTree.ElementTree object at 0x7fcd15d79a60&gt;</p>
<p>Cannot extract data from 20210523/test.ini<br>Abnormal Data=None</p>
</blockquote>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>工厂模式</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 1822. 数组元素积的符号</title>
    <url>/2021/05/26/leetcode-1822-%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%A7%AF%E7%9A%84%E7%AC%A6%E5%8F%B7/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>数组中存在0，结果为0。否则，奇数个负数，结果为-1；偶数个负数结果为1</p>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>O(n)</p>
<h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><p>O(1)</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">arraySign</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        sign = <span class="number">1</span></span><br><span class="line">        is_zero = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">                is_zero = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">                sign *= -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> is_zero <span class="keyword">and</span> sign <span class="keyword">or</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】数学</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 297. 二叉树的序列化与反序列化</title>
    <url>/2021/05/29/leetcode-297-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>前序遍历 序列化 二叉树 为 字符串<br>前序遍历 反序列化 字符串 为 二叉树<br>注意叶子节点的处理</p>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>O(n)   n为节点数</p>
<h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><p>O(n)   n为节点数</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Codec</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Encodes a tree to a single string.</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;None&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;root.val&#125;</span>,<span class="subst">&#123;self.serialize(root.left)&#125;</span>,<span class="subst">&#123;self.serialize(root.right)&#125;</span>&#x27;</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Decodes your encoded data to tree.</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :type data: str</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">build_tree</span>(<span class="params">node_list</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node_list:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            node = node_list.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> node == <span class="string">&#x27;None&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">                </span><br><span class="line">            root = TreeNode(node)</span><br><span class="line">            root.left = build_tree(node_list)</span><br><span class="line">            root.right = build_tree(node_list)</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> build_tree(data.split(<span class="string">&#x27;,&#x27;</span>))</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># ser = Codec()</span></span><br><span class="line"><span class="comment"># deser = Codec()</span></span><br><span class="line"><span class="comment"># ans = deser.deserialize(ser.serialize(root))</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>【工厂模式】抽象工厂</title>
    <url>/2021/05/30/%E3%80%90%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E3%80%91%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>一个对象的创建，依赖于多个不同的工厂方法，如何使这个对象的创建更容易呢？</p>
<h1 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h1><p>将多个工厂方法组合在一起，作为一个抽象工厂</p>
<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><h2 id="背景-amp-amp-需求"><a href="#背景-amp-amp-需求" class="headerlink" title="背景&amp;&amp;需求"></a>背景&amp;&amp;需求</h2><p>根据用户年龄，决定玩儿童游戏（青蛙吃虫子），还是成人游戏（巫师对抗怪物）</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Frog</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">interact_with</span>(<span class="params">self, obstacle</span>):</span></span><br><span class="line">        act = obstacle.action()</span><br><span class="line">        msg = <span class="string">f&#x27;<span class="subst">&#123;self&#125;</span> the Frog encounters <span class="subst">&#123;obstacle&#125;</span> and <span class="subst">&#123;act&#125;</span>!&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bug</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;a bug&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">action</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;eats it&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象工厂（创建青蛙、虫子）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrogWorld</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line">        self.player_name = name</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;------ Frog World ------&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_character</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Frog(self.player_name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_obstacle</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Bug()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wizard</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">interact_with</span>(<span class="params">self, obstacle</span>):</span></span><br><span class="line">        act = obstacle.action()</span><br><span class="line">        msg = <span class="string">f&#x27;<span class="subst">&#123;self&#125;</span> the Wizard battles against <span class="subst">&#123;obstacle&#125;</span> and <span class="subst">&#123;act&#125;</span>!&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ork</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;an evil ork&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">action</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;kills it&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象工厂（创建巫师、怪物）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WizardWorld</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line">        self.player_name = name</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;------ Wizard World ------&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_character</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Wizard(self.player_name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_obstacle</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Ork()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, factory</span>):</span></span><br><span class="line">        self.hero = factory.make_character()</span><br><span class="line">        self.obstacle = factory.make_obstacle()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.hero.interact_with(self.obstacle)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    name = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">    age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;please input age: &#x27;</span>))</span><br><span class="line">    game = age &lt; <span class="number">18</span> <span class="keyword">and</span> FrogWorld <span class="keyword">or</span> WizardWorld</span><br><span class="line">    Game(game(name)).play()</span><br></pre></td></tr></table></figure>

<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><blockquote>
<p>please input age: 18<br>—— Wizard World ——<br>user the Wizard battles against an evil ork and kills it!</p>
</blockquote>
<blockquote>
<p>please input age: 10<br>—— Frog World ——<br>user the Frog encounters a bug and eats it!</p>
</blockquote>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>工厂模式</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 56. 合并区间</title>
    <url>/2021/06/03/leetcode-56-%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>遍历数组，比较元素区间即可</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">self, intervals: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span></span><br><span class="line">        ret = []</span><br><span class="line">        new_intervals = <span class="built_in">sorted</span>(intervals, key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line">        left, right = new_intervals[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> new_intervals[<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">if</span> right &gt;= b:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> right &gt;= a:</span><br><span class="line">                right = b</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ret.append([left, right])</span><br><span class="line">                left = a</span><br><span class="line">                right = b</span><br><span class="line">        </span><br><span class="line">        ret.append([left, right])</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】数组</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 62. 不同路径</title>
    <url>/2021/06/05/leetcode-62-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>定义状态：<br>dp[i][j] := 从 (0, 0) 走到 (i, j) 不同的路径数目</p>
<p>动态规划转移方程：<br>dp[i][j] = dp[i][j-1] + dp[i-1][j]</p>
<p>状态压缩：<br>dp[j] += dp[j-1]</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uniquePaths</span>(<span class="params">self, m: <span class="built_in">int</span>, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        dp = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> col == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                dp[col] += dp[col-<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[n-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 98. 验证二叉搜索树</title>
    <url>/2021/06/05/leetcode-98-%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>判断每个节点的值是否在 (l, r) 范围内 （开区间）</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidBST</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.solve(root)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">self, root, lower=-<span class="built_in">float</span>(<span class="params"><span class="string">&#x27;INF&#x27;</span></span>), upper=<span class="built_in">float</span>(<span class="params"><span class="string">&#x27;INF&#x27;</span></span>)</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (lower &lt; root.val &lt; upper):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.solve(root.left, lower, root.val):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.solve(root.right, root.val, upper):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 277. 搜寻名人</title>
    <url>/2021/06/14/leetcode-277-%E6%90%9C%E5%AF%BB%E5%90%8D%E4%BA%BA/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>“名人” 定义：<br>其他所有 n - 1 个人都认识他/她，而他/她并不认识其他任何人</p>
<p>若a不认识b  =&gt; b一定不是名人，a可能是名人<br>若a认识c   =&gt;  a一定不是名人，c可能不是名人</p>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>O(n)</p>
<p>调用 knows 的最大次数为 3 * n </p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The knows API is already defined for you.</span></span><br><span class="line"><span class="comment"># return a bool, whether a knows b</span></span><br><span class="line"><span class="comment"># def knows(a: int, b: int) -&gt; bool:</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findCelebrity</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        candidate = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> knows(candidate, i):</span><br><span class="line">                candidate = i</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(candidate):</span><br><span class="line">            <span class="keyword">if</span> knows(candidate, i) <span class="keyword">or</span> <span class="keyword">not</span> knows(i, candidate):</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(candidate+<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> knows(i, candidate):</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> candidate</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】数组</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 322. 零钱兑换</title>
    <url>/2021/06/20/leetcode-322-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>状态：<br>dp[i] = 组成金额i需要的最小金币数</p>
<p>方程：<br>dp[i] = min(dp[i - coin[x]]) + 1<br>0&lt;=x&lt;len(coins)</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">coinChange</span>(<span class="params">self, coins: <span class="type">List</span>[<span class="built_in">int</span>], amount: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        dp = [<span class="built_in">float</span>(<span class="string">&#x27;INF&#x27;</span>)] * (amount + <span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, amount + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line">                <span class="keyword">if</span> coin &gt; i:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                dp[i] = <span class="built_in">min</span>(dp[i], dp[i-coin] + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> dp[amount] <span class="keyword">if</span> dp[amount] != <span class="built_in">float</span>(<span class="string">&#x27;INF&#x27;</span>) <span class="keyword">else</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 20. 有效的括号</title>
    <url>/2021/06/23/leetcode-20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>使用 “栈” 模拟即可</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                stack.append(char)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> stack[-<span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span> <span class="keyword">and</span> char == <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                stack.pop()</span><br><span class="line">            <span class="keyword">elif</span> stack[-<span class="number">1</span>] == <span class="string">&#x27;&#123;&#x27;</span> <span class="keyword">and</span> char == <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">                stack.pop()</span><br><span class="line">            <span class="keyword">elif</span> stack[-<span class="number">1</span>] == <span class="string">&#x27;[&#x27;</span> <span class="keyword">and</span> char == <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">                stack.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(char)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> stack</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】栈</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 103. 二叉树的锯齿形层序遍历</title>
    <url>/2021/06/23/leetcode-103-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>按层遍历二叉树即可</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">zigzagLevelOrder</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span></span><br><span class="line">        ret = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        </span><br><span class="line">        is_from_left = <span class="literal">True</span></span><br><span class="line">        queue = collections.deque()</span><br><span class="line">        queue.append(root)</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            tmp_queue = collections.deque()</span><br><span class="line">            val_list = []</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> queue:</span><br><span class="line">                node = queue.popleft()</span><br><span class="line">                <span class="keyword">if</span> is_from_left:</span><br><span class="line">                    val_list.append(node.val)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    val_list.insert(<span class="number">0</span>, node.val)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    tmp_queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    tmp_queue.append(node.right)</span><br><span class="line"></span><br><span class="line">            ret.append(val_list)</span><br><span class="line">            is_from_left = <span class="keyword">not</span> is_from_left</span><br><span class="line">            queue = tmp_queue</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】二叉树</tag>
        <tag>【算法】队列</tag>
        <tag>【算法】广搜</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 273. 整数转换英文表示</title>
    <url>/2021/06/25/leetcode-273-%E6%95%B4%E6%95%B0%E8%BD%AC%E6%8D%A2%E8%8B%B1%E6%96%87%E8%A1%A8%E7%A4%BA/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>模拟 “整数” 转换为 “英文”<br>注意：100 转换结果为 One Hundred</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numberToWords</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Zero&#x27;</span></span><br><span class="line">        </span><br><span class="line">        result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        billion = num // <span class="number">1000000000</span></span><br><span class="line">        million = (num % <span class="number">1000000000</span>) // <span class="number">1000000</span></span><br><span class="line">        thousand = (num % <span class="number">1000000</span>) // <span class="number">1000</span></span><br><span class="line">        rest = num % <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> billion:</span><br><span class="line">            result += self.three(billion) + <span class="string">&#x27; Billion&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> million:</span><br><span class="line">            result += result <span class="keyword">and</span> <span class="string">&#x27; &#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">            result += self.three(million) + <span class="string">&#x27; Million&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> thousand:</span><br><span class="line">            result += result <span class="keyword">and</span> <span class="string">&#x27; &#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">            result += self.three(thousand) + <span class="string">&#x27; Thousand&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> rest:</span><br><span class="line">            result += result <span class="keyword">and</span> <span class="string">&#x27; &#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">            result += self.three(rest)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">three</span>(<span class="params">self, num</span>):</span></span><br><span class="line">        hundred = num // <span class="number">100</span></span><br><span class="line">        rest = num % <span class="number">100</span></span><br><span class="line">        <span class="keyword">if</span> hundred <span class="keyword">and</span> rest:</span><br><span class="line">            <span class="keyword">return</span> self.one(hundred) + <span class="string">&#x27; Hundred &#x27;</span> + self.two(rest)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hundred <span class="keyword">and</span> rest:</span><br><span class="line">            <span class="keyword">return</span> self.two(rest)</span><br><span class="line">        <span class="keyword">if</span> hundred <span class="keyword">and</span> <span class="keyword">not</span> rest:</span><br><span class="line">            <span class="keyword">return</span> self.one(hundred) + <span class="string">&#x27; Hundred&#x27;</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">one</span>(<span class="params">self, num</span>):</span></span><br><span class="line">        switcher = &#123;</span><br><span class="line">            <span class="number">1</span>: <span class="string">&#x27;One&#x27;</span>,</span><br><span class="line">            <span class="number">2</span>: <span class="string">&#x27;Two&#x27;</span>,</span><br><span class="line">            <span class="number">3</span>: <span class="string">&#x27;Three&#x27;</span>,</span><br><span class="line">            <span class="number">4</span>: <span class="string">&#x27;Four&#x27;</span>,</span><br><span class="line">            <span class="number">5</span>: <span class="string">&#x27;Five&#x27;</span>,</span><br><span class="line">            <span class="number">6</span>: <span class="string">&#x27;Six&#x27;</span>,</span><br><span class="line">            <span class="number">7</span>: <span class="string">&#x27;Seven&#x27;</span>,</span><br><span class="line">            <span class="number">8</span>: <span class="string">&#x27;Eight&#x27;</span>,</span><br><span class="line">            <span class="number">9</span>: <span class="string">&#x27;Nine&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> switcher.get(num)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">two</span>(<span class="params">self, num</span>):</span></span><br><span class="line">        <span class="keyword">if</span> num &lt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> self.one(num)</span><br><span class="line">        <span class="keyword">if</span> num &lt; <span class="number">20</span>:</span><br><span class="line">            <span class="keyword">return</span> self.two_less_20(num)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tenner = num // <span class="number">10</span></span><br><span class="line">            rest = num % <span class="number">10</span></span><br><span class="line">            <span class="keyword">return</span> rest <span class="keyword">and</span> self.ten(tenner) + <span class="string">&#x27; &#x27;</span> + self.one(rest) <span class="keyword">or</span> self.ten(tenner)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">two_less_20</span>(<span class="params">self, num</span>):</span></span><br><span class="line">        switcher = &#123;</span><br><span class="line">            <span class="number">10</span>: <span class="string">&#x27;Ten&#x27;</span>,</span><br><span class="line">            <span class="number">11</span>: <span class="string">&#x27;Eleven&#x27;</span>,</span><br><span class="line">            <span class="number">12</span>: <span class="string">&#x27;Twelve&#x27;</span>,</span><br><span class="line">            <span class="number">13</span>: <span class="string">&#x27;Thirteen&#x27;</span>,</span><br><span class="line">            <span class="number">14</span>: <span class="string">&#x27;Fourteen&#x27;</span>,</span><br><span class="line">            <span class="number">15</span>: <span class="string">&#x27;Fifteen&#x27;</span>,</span><br><span class="line">            <span class="number">16</span>: <span class="string">&#x27;Sixteen&#x27;</span>,</span><br><span class="line">            <span class="number">17</span>: <span class="string">&#x27;Seventeen&#x27;</span>,</span><br><span class="line">            <span class="number">18</span>: <span class="string">&#x27;Eighteen&#x27;</span>,</span><br><span class="line">            <span class="number">19</span>: <span class="string">&#x27;Nineteen&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> switcher.get(num)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ten</span>(<span class="params">self, num</span>):</span></span><br><span class="line">        switcher = &#123;</span><br><span class="line">            <span class="number">2</span>: <span class="string">&#x27;Twenty&#x27;</span>,</span><br><span class="line">            <span class="number">3</span>: <span class="string">&#x27;Thirty&#x27;</span>,</span><br><span class="line">            <span class="number">4</span>: <span class="string">&#x27;Forty&#x27;</span>,</span><br><span class="line">            <span class="number">5</span>: <span class="string">&#x27;Fifty&#x27;</span>,</span><br><span class="line">            <span class="number">6</span>: <span class="string">&#x27;Sixty&#x27;</span>,</span><br><span class="line">            <span class="number">7</span>: <span class="string">&#x27;Seventy&#x27;</span>,</span><br><span class="line">            <span class="number">8</span>: <span class="string">&#x27;Eighty&#x27;</span>,</span><br><span class="line">            <span class="number">9</span>: <span class="string">&#x27;Ninety&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> switcher.get(num)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】字符串</tag>
        <tag>【算法】数学</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 17. 电话号码的字母组合</title>
    <url>/2021/06/28/leetcode-17-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h2><p>深搜，即可生成字母的数字组合</p>
<h2 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h2><p>利用python3内置函数，生成笛卡尔积</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="解法1-1"><a href="#解法1-1" class="headerlink" title="解法1"></a>解法1</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.num_chars_mapping = &#123;</span><br><span class="line">            <span class="number">2</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">            <span class="number">3</span>: [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">            <span class="number">4</span>: [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>],</span><br><span class="line">            <span class="number">5</span>: [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>],</span><br><span class="line">            <span class="number">6</span>: [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>],</span><br><span class="line">            <span class="number">7</span>: [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>],</span><br><span class="line">            <span class="number">8</span>: [<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>],</span><br><span class="line">            <span class="number">9</span>: [<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span>(<span class="params">self, digits: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span></span><br><span class="line">        <span class="keyword">return</span> [] <span class="keyword">if</span> <span class="keyword">not</span> digits <span class="keyword">else</span> self.combinate(<span class="number">0</span>, digits)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinate</span>(<span class="params">self, index, s, combinations=[]</span>):</span></span><br><span class="line">        <span class="keyword">if</span> index &gt;= <span class="built_in">len</span>(s):</span><br><span class="line">            <span class="keyword">return</span> combinations</span><br><span class="line"></span><br><span class="line">        chars = self.num_chars_mapping[<span class="built_in">int</span>(s[index])]</span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">            combinations = chars</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp = []</span><br><span class="line">            <span class="keyword">for</span> combination <span class="keyword">in</span> combinations:</span><br><span class="line">                <span class="keyword">for</span> char <span class="keyword">in</span> chars:</span><br><span class="line">                    tmp.append(combination+char)</span><br><span class="line">            combinations = tmp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.combinate(index+<span class="number">1</span>, s, combinations)</span><br></pre></td></tr></table></figure>
<h2 id="解法2-1"><a href="#解法2-1" class="headerlink" title="解法2"></a>解法2</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.num_chars_mapping = &#123;</span><br><span class="line">            <span class="number">2</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">            <span class="number">3</span>: [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">            <span class="number">4</span>: [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>],</span><br><span class="line">            <span class="number">5</span>: [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>],</span><br><span class="line">            <span class="number">6</span>: [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>],</span><br><span class="line">            <span class="number">7</span>: [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>],</span><br><span class="line">            <span class="number">8</span>: [<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>],</span><br><span class="line">            <span class="number">9</span>: [<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span>(<span class="params">self, digits: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> digits:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        groups = [self.num_chars_mapping[<span class="built_in">int</span>(digit)] <span class="keyword">for</span> digit <span class="keyword">in</span> digits]</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;&#x27;</span>.join(item) <span class="keyword">for</span> item <span class="keyword">in</span> itertools.product(*groups)]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】深搜</tag>
        <tag>【算法】笛卡尔积</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 706. 设计哈希映射</title>
    <url>/2021/07/02/leetcode-706-%E8%AE%BE%E8%AE%A1%E5%93%88%E5%B8%8C%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h2><h3 id="超大数组"><a href="#超大数组" class="headerlink" title="超大数组"></a>超大数组</h3><p>预先开出max(key)的空间，确保每个key都有一个单独的索引</p>
<h2 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h2><h3 id="拉链数组"><a href="#拉链数组" class="headerlink" title="拉链数组"></a>拉链数组</h3><p>超大数组会占用的空间太大，可以将输入的数据分桶，每个桶的数据动态增长</p>
<h3 id="分桶方法"><a href="#分桶方法" class="headerlink" title="分桶方法"></a>分桶方法</h3><p>推荐使用质数取余进行分桶</p>
<h3 id="使用质数取余分桶的原因"><a href="#使用质数取余分桶的原因" class="headerlink" title="使用质数取余分桶的原因"></a>使用质数取余分桶的原因</h3><p>只要输入的数据足够随机，是否用质数取模无所谓的；<br>但是实际输入的数据一般是有规律的，如果使用合数取余，当合数和数据存在非1的约数，<br>那数据只会被分桶到约数的倍数，违背了尽量使各个桶之间的元素数近似相等的原则。<br>参考：<br><a href="https://www.zhihu.com/question/20806796/answer/21359160">https://www.zhihu.com/question/20806796/answer/21359160</a><br><a href="https://blog.csdn.net/xp178171640/article/details/102929544">https://blog.csdn.net/xp178171640/article/details/102929544</a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="解法1-1"><a href="#解法1-1" class="headerlink" title="解法1"></a>解法1</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHashMap</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.hash_map = [-<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>**<span class="number">6</span> + <span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, key: <span class="built_in">int</span>, value: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.hash_map[key] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, key: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.hash_map[key]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">self, key: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.hash_map[key] = -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="解法2-1"><a href="#解法2-1" class="headerlink" title="解法2"></a>解法2</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHashMap</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.bucket_size = <span class="number">1009</span> <span class="comment"># 质数</span></span><br><span class="line">        self.hash_map = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(self.bucket_size)]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_bucket_index</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="keyword">return</span> key % self.bucket_size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, key: <span class="built_in">int</span>, value: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        bucket_index = self.get_bucket_index(key)</span><br><span class="line">        <span class="keyword">for</span> existed_map <span class="keyword">in</span> self.hash_map[bucket_index]:</span><br><span class="line">            <span class="keyword">if</span> existed_map[<span class="number">0</span>] == key:</span><br><span class="line">                existed_map[<span class="number">1</span>] = value</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        self.hash_map[bucket_index].append([key, value])</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, key: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        bucket_index = self.get_bucket_index(key)</span><br><span class="line">        <span class="keyword">for</span> existed_key, existed_val <span class="keyword">in</span> self.hash_map[bucket_index]:</span><br><span class="line">            <span class="keyword">if</span> existed_key == key:</span><br><span class="line">                <span class="keyword">return</span> existed_val</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">self, key: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        bucket_index = self.get_bucket_index(key)</span><br><span class="line">        <span class="keyword">for</span> index, existed_map <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.hash_map[bucket_index]):</span><br><span class="line">            <span class="keyword">if</span> existed_map[<span class="number">0</span>] == key:</span><br><span class="line">                self.hash_map[bucket_index].pop(index)</span><br><span class="line">                <span class="keyword">return</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】数学</tag>
        <tag>【算法】哈希</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 33. 搜索旋转排序数组</title>
    <url>/2021/07/10/leetcode-33-%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>“二分查找”<br>注意考虑 3 种情况：<br>1、nums[l] &lt; nums[mid]<br>2、nums[l] &gt; nums[mid]<br>3、nums[l] == nums[mid]</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        l = <span class="number">0</span></span><br><span class="line">        r = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">            mid = (l+r) &gt;&gt; <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> target == nums[mid]:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">if</span> nums[l] &lt;= nums[mid]:</span><br><span class="line">                <span class="keyword">if</span> nums[l] &lt;= target &lt; nums[mid]:</span><br><span class="line">                    r = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    l = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> nums[mid] &lt; target &lt;= nums[r]:</span><br><span class="line">                    l = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    r = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】数组</tag>
        <tag>【算法】二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 253. 会议室 II</title>
    <url>/2021/07/11/leetcode-253-%E4%BC%9A%E8%AE%AE%E5%AE%A4-II/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>1、将会议时间数组排序：<br>   按start从小到大排序，当start相同时，按end从小到大排序<br>2、根据会议时间顺序依次安排房间：<br>   记录每个房间释放的时间，若即将安排的会议start早于最小的释放时间，则需要新房间，否则更新房间的释放时间</p>
<p>贪心关键点：将 “即将安排的会议start” 与 “最小的释放时间” 做比较，尽可能避免冲突</p>
<blockquote>
<p>关于贪心，可参考：<a href="https://www.jianshu.com/p/ab89df9759c8">https://www.jianshu.com/p/ab89df9759c8</a></p>
</blockquote>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>O(N*logN)   N：会议时间数组长度</p>
<p>详细分析：<br>1、python sorted时间复杂度：O(N*logN)</p>
<blockquote>
<p>关于sorted时间复杂度，可参考：<a href="https://www.cnblogs.com/clement-jiao/p/9243066.html">https://www.cnblogs.com/clement-jiao/p/9243066.html</a></p>
</blockquote>
<p>2、最坏情况下N个会议均冲突，此时heappop[0]时间复杂度：O(1)，heappush时间复杂度：O(logN)，故总的时间复杂度为O(N*logN)</p>
<blockquote>
<p>关于heapq操作的时间复杂度，可参考：<a href="https://www.coder.work/article/97172">https://www.coder.work/article/97172</a></p>
</blockquote>
<h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><p>O(N)        N：会议时间数组长度</p>
<p>详细分析<br>1、最坏情况下N个会议均冲突，heap_queue需要存储N个数据</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minMeetingRooms</span>(<span class="params">self, intervals: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        heap_queue = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> start, end <span class="keyword">in</span> <span class="built_in">sorted</span>(intervals, key=<span class="keyword">lambda</span> item: (item[<span class="number">0</span>], item[<span class="number">1</span>])):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> heap_queue:</span><br><span class="line">                heapq.heappush(heap_queue, end)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> start &gt;= heap_queue[<span class="number">0</span>]:</span><br><span class="line">                heapq.heappop(heap_queue)</span><br><span class="line">            heapq.heappush(heap_queue, end)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(heap_queue)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】贪心</tag>
        <tag>【算法】优先队列</tag>
      </tags>
  </entry>
  <entry>
    <title>【建造者模式】</title>
    <url>/2021/07/17/%E3%80%90%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F%E3%80%91/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>1、创建的对象复杂，需要由多个部分组成，且这些这些部分需要按照特定顺序完成<br>2、希望构造与表示解耦</p>
<h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><p>可以创建一个由多个部分（这些部分按特定顺序完成）组成的对象</p>
<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><h2 id="背景-amp-amp-需求"><a href="#背景-amp-amp-需求" class="headerlink" title="背景&amp;&amp;需求"></a>背景&amp;&amp;需求</h2><p>披萨订购应用程序<br>支持订购2种披萨：Margarita披萨、CreamyBacon披萨<br>制作披萨需4个步骤：1、准备面团；2、加调味汁；3、加配料；4、烤</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PizzaProgress</span>(<span class="params">Enum</span>):</span></span><br><span class="line">    queued = <span class="number">1</span></span><br><span class="line">    preparation = <span class="number">2</span></span><br><span class="line">    baking = <span class="number">3</span></span><br><span class="line">    ready = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PizzaDough</span>(<span class="params">Enum</span>):</span></span><br><span class="line">    thin = <span class="number">1</span>  <span class="comment"># 薄的</span></span><br><span class="line">    thick = <span class="number">2</span>  <span class="comment"># 厚的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PizzaSauce</span>(<span class="params">Enum</span>):</span></span><br><span class="line">    tomato = <span class="number">1</span></span><br><span class="line">    creme_fraiche = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PizzaTopping</span>(<span class="params">Enum</span>):</span></span><br><span class="line">    mozzarella = <span class="number">1</span>  <span class="comment"># 奶酪</span></span><br><span class="line">    ham = <span class="number">2</span>  <span class="comment"># 火腿</span></span><br><span class="line">    mushrooms = <span class="number">3</span>  <span class="comment"># 蘑菇</span></span><br><span class="line">    double_mozzarella = <span class="number">4</span></span><br><span class="line">    oregano = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pizza</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.dough = <span class="literal">None</span>  <span class="comment"># 面团</span></span><br><span class="line">        self.sauce = <span class="literal">None</span>  <span class="comment"># 调味汁</span></span><br><span class="line">        self.topping = []  <span class="comment"># 配料</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MargaritaBuilder</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.pizza = Pizza(<span class="string">&#x27;margarita&#x27;</span>)</span><br><span class="line">        self.progress = PizzaProgress.queued</span><br><span class="line">        self.baking_time = <span class="number">1</span>  <span class="comment"># 烤1s</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prepare_dough</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;prepare dough for margarita&#x27;</span>)</span><br><span class="line">        self.progress = PizzaProgress.preparation</span><br><span class="line">        self.pizza.dough = PizzaDough.thin</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;done with dough&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_sauce</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;add sauce to margarita&#x27;</span>)</span><br><span class="line">        self.pizza.sauce = PizzaSauce.tomato</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;done with sauce&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_topping</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;add topping to margarita&#x27;</span>)</span><br><span class="line">        topping_items = [</span><br><span class="line">            PizzaTopping.double_mozzarella,</span><br><span class="line">            PizzaTopping.oregano</span><br><span class="line">        ]</span><br><span class="line">        self.pizza.topping.append([item <span class="keyword">for</span> item <span class="keyword">in</span> topping_items])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;done with topping&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bake</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.progress = PizzaProgress.baking</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;baking margarita...&#x27;</span>)</span><br><span class="line">        time.sleep(self.baking_time)</span><br><span class="line">        self.progress = PizzaProgress.ready</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;margarita ready&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreamyBaconBuilder</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.pizza = Pizza(<span class="string">&#x27;creamy bacon&#x27;</span>)</span><br><span class="line">        self.progress = PizzaProgress.queued</span><br><span class="line">        self.baking_time = <span class="number">2</span>  <span class="comment"># 烤2s</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prepare_dough</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;prepare dough for creamy bacon&#x27;</span>)</span><br><span class="line">        self.progress = PizzaProgress.preparation</span><br><span class="line">        self.pizza.dough = PizzaDough.thick</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;done with dough&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_sauce</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;add sauce to creamy bacon&#x27;</span>)</span><br><span class="line">        self.pizza.sauce = PizzaSauce.creme_fraiche</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;done with sauce&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_topping</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;add topping to creamy bacon&#x27;</span>)</span><br><span class="line">        topping_items = [</span><br><span class="line">            PizzaTopping.mozzarella,</span><br><span class="line">            PizzaTopping.ham</span><br><span class="line">        ]</span><br><span class="line">        self.pizza.topping.append([item <span class="keyword">for</span> item <span class="keyword">in</span> topping_items])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;done with topping&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bake</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.progress = PizzaProgress.baking</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;baking creamy bacon...&#x27;</span>)</span><br><span class="line">        time.sleep(self.baking_time)</span><br><span class="line">        self.progress = PizzaProgress.ready</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;creamy bacon ready&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Waiter</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.builder = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">construct_pizza</span>(<span class="params">self, builder</span>):</span></span><br><span class="line">        self.builder = builder</span><br><span class="line">        steps = [</span><br><span class="line">            builder.prepare_dough,</span><br><span class="line">            builder.add_sauce,</span><br><span class="line">            builder.add_topping,</span><br><span class="line">            builder.bake</span><br><span class="line">        ]</span><br><span class="line">        [step() <span class="keyword">for</span> step <span class="keyword">in</span> steps]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pizza</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.builder.pizza</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    waiter = Waiter()</span><br><span class="line">    waiter.construct_pizza(MargaritaBuilder())</span><br><span class="line">    pizza = waiter.pizza</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Enjoy <span class="subst">&#123;pizza&#125;</span>!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-----------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    waiter.construct_pizza(CreamyBaconBuilder())</span><br><span class="line">    pizza = waiter.pizza</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Enjoy <span class="subst">&#123;pizza&#125;</span>!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><blockquote>
<p>prepare dough for margarita<br>done with dough<br>add sauce to margarita<br>done with sauce<br>add topping to margarita<br>done with topping<br>baking margarita…<br>margarita ready<br>Enjoy margarita!</p>
<hr>
<p>prepare dough for creamy bacon<br>done with dough<br>add sauce to creamy bacon<br>done with sauce<br>add topping to creamy bacon<br>done with topping<br>baking creamy bacon…<br>creamy bacon ready<br>Enjoy creamy bacon!</p>
</blockquote>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>建造者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 22. 括号生成</title>
    <url>/2021/07/31/leetcode-22-%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>深搜，生成括号</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.n = <span class="literal">None</span></span><br><span class="line">        self.ans = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateParenthesis</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span></span><br><span class="line">        self.n = n</span><br><span class="line">        self.ans = []</span><br><span class="line">        self.solve(<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> self.ans</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">self, s, left, right</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) == self.n*<span class="number">2</span>:</span><br><span class="line">            self.ans.append(s)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> left &lt; self.n:</span><br><span class="line">            self.solve(s+<span class="string">&#x27;(&#x27;</span>, left+<span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> right &lt; left:</span><br><span class="line">            self.solve(s+<span class="string">&#x27;)&#x27;</span>, left, right+<span class="number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】深搜</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 117. 填充每个节点的下一个右侧节点指针 II</title>
    <url>/2021/08/07/leetcode-117-%E5%A1%AB%E5%85%85%E6%AF%8F%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%8F%B3%E4%BE%A7%E8%8A%82%E7%82%B9%E6%8C%87%E9%92%88-II/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>按层遍历树即可</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span>(<span class="params">self, root: <span class="string">&#x27;Node&#x27;</span></span>) -&gt; &#x27;Node&#x27;:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">        layer_nodes = [root]</span><br><span class="line">        <span class="keyword">while</span> layer_nodes:</span><br><span class="line">            next_layer_nodes = []</span><br><span class="line">            layer_nodes_len = <span class="built_in">len</span>(layer_nodes)</span><br><span class="line">            <span class="keyword">for</span> i, node <span class="keyword">in</span> <span class="built_in">enumerate</span>(layer_nodes):</span><br><span class="line">                <span class="keyword">if</span> i == layer_nodes_len - <span class="number">1</span>:</span><br><span class="line">                    node.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    node.<span class="built_in">next</span> = layer_nodes[i+<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    next_layer_nodes.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    next_layer_nodes.append(node.right)</span><br><span class="line">            layer_nodes = next_layer_nodes</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>【原型模式】</title>
    <url>/2021/08/07/%E3%80%90%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%E3%80%91/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>需要克隆一个对象</p>
<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><p>创建对象的克隆（例如：python中的copy）</p>
<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><h2 id="背景-amp-amp-需求"><a href="#背景-amp-amp-需求" class="headerlink" title="背景 &amp;&amp; 需求"></a>背景 &amp;&amp; 需求</h2><p>克隆对象</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>():</span></span><br><span class="line">    info1 = <span class="built_in">dict</span>(name=<span class="string">&#x27;123&#x27;</span>, books=[<span class="string">&#x27;book1&#x27;</span>, <span class="string">&#x27;book2&#x27;</span>])</span><br><span class="line">    info2 = copy.deepcopy(info1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;info1: <span class="subst">&#123;<span class="built_in">id</span>(info1)&#125;</span>, name: <span class="subst">&#123;<span class="built_in">id</span>(info1[<span class="string">&quot;name&quot;</span>])&#125;</span>, books: <span class="subst">&#123;<span class="built_in">id</span>(info1[<span class="string">&quot;books&quot;</span>])&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;info2: <span class="subst">&#123;<span class="built_in">id</span>(info2)&#125;</span>, name: <span class="subst">&#123;<span class="built_in">id</span>(info2[<span class="string">&quot;name&quot;</span>])&#125;</span>, books: <span class="subst">&#123;<span class="built_in">id</span>(info2[<span class="string">&quot;books&quot;</span>])&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><blockquote>
<p>info1: 4540133696, name: 4538957168, books: 4540422336<br>info2: 4538883840, name: 4538957168, books: 4540493376</p>
</blockquote>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>原型模式</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 198. 打家劫舍</title>
    <url>/2021/09/18/leetcode-198-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</url>
    <content><![CDATA[<h1 id="解体思路"><a href="#解体思路" class="headerlink" title="解体思路"></a>解体思路</h1><p>到达第i个房屋，可以偷窃到的最高金额<br>dp[i] = max(dp[i-2] + nums[i], dp[i-1])</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rob</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        nums_len = <span class="built_in">len</span>(nums)</span><br><span class="line">        dp = [<span class="number">0</span>] * nums_len</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> nums_len == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> dp[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">1</span>] = <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">if</span> nums_len == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> dp[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, nums_len):</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i-<span class="number">2</span>] + nums[i], dp[i-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[nums_len-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 基础</title>
    <url>/2021/09/21/Docker-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="什么是Docker？"><a href="#什么是Docker？" class="headerlink" title="什么是Docker？"></a>什么是Docker？</h1><p>加速 构建、共享、运行 应用程序的方式</p>
<h1 id="为什么要使用Docker？"><a href="#为什么要使用Docker？" class="headerlink" title="为什么要使用Docker？"></a>为什么要使用Docker？</h1><h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p>开发时，本机测试环境可以跑，但生产环境跑不起来，很可能的原因：软件环境版本不同。<br>【Docker解决方案】将 “软件+应用环境” 一起打包  =&gt;  一致的运行环境，可以更轻松的构建</p>
<h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>需要部署n台服务器，服务器软件环境可能不同、服务器多<br>【Docker解决方案】将 “应用+应用环境” 打包为镜像，各服务器下载镜像，运行即可  </p>
<h2 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h2><p>server有限，需要在一台server运行2个不同软件环境的应用<br>【Docker解决方案】Docker打包2个镜像，分别运行（2个应用进程隔离，互不影响）  </p>
<h1 id="对比虚拟机"><a href="#对比虚拟机" class="headerlink" title="对比虚拟机"></a>对比虚拟机</h1><h2 id="Docker和虚拟机在物理机中的位置"><a href="#Docker和虚拟机在物理机中的位置" class="headerlink" title="Docker和虚拟机在物理机中的位置"></a>Docker和虚拟机在物理机中的位置</h2><p><img src="/images/Docker%20%E5%9F%BA%E7%A1%80/2021-10-01%2001.33.42.png"><br>从最后起到的作用看：Docker服务 &lt;=&gt; 虚拟机+linux/window</p>
<h2 id="Docker和虚拟机对比"><a href="#Docker和虚拟机对比" class="headerlink" title="Docker和虚拟机对比"></a>Docker和虚拟机对比</h2><table>
<thead>
<tr>
<th></th>
<th align="center">虚拟机</th>
<th align="center">Docker</th>
</tr>
</thead>
<tbody><tr>
<td>磁盘</td>
<td align="center">xG～xxG（安装虚拟机+os）</td>
<td align="center"><font color='green'>xxM~xxxM（安装docker）</font></td>
</tr>
<tr>
<td>部署</td>
<td align="center">每次费时费力</td>
<td align="center"><font color='green'>从第<font color='red'>2</font>次部署便捷</font></td>
</tr>
<tr>
<td>启动速度</td>
<td align="center">x分钟（开机-&gt;运行项目）</td>
<td align="center"><font color='green'>x秒（开启容器-&gt;运行项目）</font></td>
</tr>
<tr>
<td>CPU、内存占用</td>
<td align="center">高（运行虚拟机+os）</td>
<td align="center"><font color='green'>极低（运行Docker服务）</font></td>
</tr>
<tr>
<td>运行速度</td>
<td align="center">慢（调度：应用-&gt;linux/windows-&gt;虚拟机-&gt;os）</td>
<td align="center"><font color='green'>快（调度：应用-&gt;docker-&gt;os）</font></td>
</tr>
<tr>
<td>耦合性</td>
<td align="center">多个app安装在一起，容易相互影响</td>
<td align="center"><font color='green'>一个app一个容器，实现隔离</font></td>
</tr>
<tr>
<td>系统依赖</td>
<td align="center">无</td>
<td align="center"><font color='red'>linux内核</font></td>
</tr>
</tbody></table>
<h1 id="Docker核心概念"><a href="#Docker核心概念" class="headerlink" title="Docker核心概念"></a>Docker核心概念</h1><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>一个镜像   相当于   一个软件<br>特点：只读</p>
<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>基于某个镜像运行一次就生成一个程序实例，一个程序实例即为容器<br>特点：可读可写</p>
<h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>存储Docker中镜像的位置<br>远程仓库：远程服务器存储镜像的位置<br>本地仓库：当前自己本地存储镜像的位置  </p>
<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>构建镜像的文件</p>
<h3 id="为什么需要Dockerfile"><a href="#为什么需要Dockerfile" class="headerlink" title="为什么需要Dockerfile"></a>为什么需要Dockerfile</h3><p>虽然官方提供很多镜像，但Dockerfile可以使用户将自己的应用打包为镜像，这样就可以以容器的形式运行自己的应用</p>
<h1 id="Docker架构图"><a href="#Docker架构图" class="headerlink" title="Docker架构图"></a>Docker架构图</h1><p><img src="/images/Docker%20%E5%9F%BA%E7%A1%80/2021-10-01%2015.16.04.png"></p>
<h1 id="Docker镜像分层原理"><a href="#Docker镜像分层原理" class="headerlink" title="Docker镜像分层原理"></a>Docker镜像分层原理</h1><h2 id="镜像-1"><a href="#镜像-1" class="headerlink" title="镜像"></a>镜像</h2><p>软件运行环境 + 软件<br>包含：代码、运行时所需的库、环境变量、配置文件  </p>
<h2 id="镜像为什么这么大？"><a href="#镜像为什么这么大？" class="headerlink" title="镜像为什么这么大？"></a>镜像为什么这么大？</h2><p>image = 自身软件+软件自身依赖+os依赖  </p>
<h2 id="镜像为什么分层？"><a href="#镜像为什么分层？" class="headerlink" title="镜像为什么分层？"></a>镜像为什么分层？</h2><p><img src="/images/Docker%20%E5%9F%BA%E7%A1%80/2021-10-01%2015.24.12.png"><br>Docker在设计镜像时，每一个镜像都是由n个镜像共同组成，镜像像花卷一层层组成（UnionFs联合文件系统)<br>通过分层：多个镜像可以实现基础镜像的共享，从而减小远程/本地仓库整体体积</p>
<h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h1><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><h3 id="查看本地仓库有哪些镜像"><a href="#查看本地仓库有哪些镜像" class="headerlink" title="查看本地仓库有哪些镜像"></a>查看本地仓库有哪些镜像</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><img src="/images/Docker%20%E5%9F%BA%E7%A1%80/2021-10-07%2016.08.22.png"></p>
<h3 id="下载新镜像"><a href="#下载新镜像" class="headerlink" title="下载新镜像"></a>下载新镜像</h3><p>docker pull 镜像名称:版本号</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">docker pull mysql:8.0.26</span><br></pre></td></tr></table></figure>

<p><img src="/images/Docker%20%E5%9F%BA%E7%A1%80/2021-10-07%2016.20.06.png"></p>
<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">docker rmi mysql:8.0.26</span><br></pre></td></tr></table></figure>

<h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">docker run --name ubuntu_v1 -id ubuntu:20.0</span><br></pre></td></tr></table></figure>

<h3 id="查看正在-历史运行的容器"><a href="#查看正在-历史运行的容器" class="headerlink" title="查看正在/历史运行的容器"></a>查看正在/历史运行的容器</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器ID bash</span><br></pre></td></tr></table></figure>

<h3 id="启动｜停止｜重启容器"><a href="#启动｜停止｜重启容器" class="headerlink" title="启动｜停止｜重启容器"></a>启动｜停止｜重启容器</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">docker start 容器ID</span><br><span class="line">docker stop 容器ID</span><br><span class="line">docker restart 容器ID</span><br></pre></td></tr></table></figure>

<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">docker rm 容器ID</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>[1] <a href="https://www.bilibili.com/video/BV1ZT4y1K75K?spm_id_from=333.999.0.0">Docker容器技术实战教程</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>【Docker】基础</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 239. 滑动窗口最大值</title>
    <url>/2021/10/01/leetcode-239-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>模拟窗口滑动，利用优先队列获取窗口内的最大值</p>
<p>注意：避免窗口外的数据造成影响</p>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>O(nlogn)</p>
<h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><p>O(n)</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSlidingWindow</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        ret = []</span><br><span class="line"></span><br><span class="line">        q = []</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            heapq.heappush(q, (-nums[i], i))</span><br><span class="line">            <span class="keyword">if</span> i &lt; k-<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 窗口外的元素要移除</span></span><br><span class="line">            <span class="keyword">while</span> q[<span class="number">0</span>][<span class="number">1</span>] &lt;= i-k:</span><br><span class="line">                heapq.heappop(q)</span><br><span class="line">            </span><br><span class="line">            ret.append(-q[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>【算法】优先队列</tag>
      </tags>
  </entry>
  <entry>
    <title>neovim使用记录</title>
    <url>/2021/10/02/neovim%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载最新版本：<a href="https://github.com/neovim/neovim/releases">nvim-macos.tar.gz</a></p>
<h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">tar xzvf nvim-macos.tar.gz</span><br></pre></td></tr></table></figure>

<p>将解压文件夹（nvim-osx64）剪切到 /Users/sjm/Tools</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="修改默认配置文件位置"><a href="#修改默认配置文件位置" class="headerlink" title="修改默认配置文件位置"></a>修改默认配置文件位置</h2><p>在/Users/sjm/Tools/nvim-osx64下新建文件夹nvim</p>
<p>在文件夹nvim下，新建文件init.vim</p>
<h2 id="指定nvim别名"><a href="#指定nvim别名" class="headerlink" title="指定nvim别名"></a>指定nvim别名</h2><p>执行</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">vim .zshrc</span><br></pre></td></tr></table></figure>

<p>添加</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">alias nvim=&quot;XDG_CONFIG_HOME=/Users/sjm/Tools/nvim-osx64 /Users/sjm/Tools/nvim-osx64/bin/nvim&quot;</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">source .zshrc</span><br></pre></td></tr></table></figure>

<h1 id="验证nvim可用"><a href="#验证nvim可用" class="headerlink" title="验证nvim可用"></a>验证nvim可用</h1><p>执行</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">nvim</span><br></pre></td></tr></table></figure>

<p>预期出现nvim窗口</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li>[1] <a href="https://lin.am/blog/2020-11-28-multiple-versions-of-neovim/">修改nvim配置文件默认位置</a></li>
</ul>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
</search>
